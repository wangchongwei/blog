{"meta":{"title":"Happy To Try","subtitle":"Plan","description":"Please description","author":"justin","url":"hexo"},"pages":[{"title":"关于","date":"2016-12-25T07:58:56.000Z","updated":"2019-07-05T09:18:33.220Z","comments":false,"path":"about/index.html","permalink":"hexo/about/index.html","excerpt":"","text":""},{"title":"分类","date":"2017-01-01T06:52:00.000Z","updated":"2019-04-19T02:04:38.000Z","comments":false,"path":"categories/index.html","permalink":"hexo/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2017-01-01T06:50:50.000Z","updated":"2019-04-19T02:04:38.000Z","comments":false,"path":"tags/index.html","permalink":"hexo/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"facebook推广api 推广主页","slug":"facebook推广api-推广主页","date":"2019-07-11T02:58:31.000Z","updated":"2019-07-11T03:01:09.159Z","comments":true,"path":"blog/2019/07/facebook推广api-推广主页.html","link":"","permalink":"hexo/blog/2019/07/facebook推广api-推广主页.html","excerpt":"","text":"主页推广","categories":[],"tags":[]},{"title":"maven","slug":"maven","date":"2019-07-08T06:36:59.000Z","updated":"2019-07-08T06:38:37.069Z","comments":true,"path":"blog/2019/07/maven.html","link":"","permalink":"hexo/blog/2019/07/maven.html","excerpt":"","text":"mavenmaven 查看依赖树mvn dependency:tree &gt; xxx // 将maven依赖树关系导入到文件 XXXcode xxx // 打开xxx文件 gradle 查看依赖树gradle app:dependency // 查看依赖树关系","categories":[],"tags":[]},{"title":"react发布到javaweb","slug":"react发布到javaweb","date":"2019-07-05T06:29:35.000Z","updated":"2019-07-05T09:33:42.061Z","comments":true,"path":"blog/2019/07/react发布到javaweb.html","link":"","permalink":"hexo/blog/2019/07/react发布到javaweb.html","excerpt":"","text":"react项目发布到javaweb中1、打包react直接执行npm run build命令：发现在build目录下生成资源文件，但是打开index.html发现报错，发现在生成的index.html中引入的文件路径有问题：/static /多余，或者说少了. 正确的路径应该是：static 或者 ./static 发现是%PUBLIC_URL%问题，在构建时应该执行 PUBLIC_URL=./ npm run build 2、集成到javaweb中将上一步生成build目录下的文件都复制放在webapp路径下，启动应用就能直接访问到index.html文件","categories":[],"tags":[{"name":"react+spring","slug":"react-spring","permalink":"hexo/tags/react-spring/"}]},{"title":"facebook 营销api集成","slug":"facebook-营销api集成","date":"2019-06-28T02:15:25.000Z","updated":"2019-07-11T03:08:15.587Z","comments":true,"path":"blog/2019/06/facebook-营销api集成.html","link":"","permalink":"hexo/blog/2019/06/facebook-营销api集成.html","excerpt":"","text":"facebook 营销api集成营销api需要通过后端服务器与facebook服务器交互 1、下载营销api java代码git clone https://github.com/facebook/facebook-java-business-sdk.git 编辑器：IDEA 123456789101112// 在pom.xml中添加依赖&lt;dependency&gt; &lt;groupId&gt;com.facebook.business.sdk&lt;/groupId&gt; &lt;artifactId&gt;facebook-java-business-sdk&lt;/artifactId&gt; &lt;version&gt;3.0.0&lt;/version&gt;&lt;/dependency&gt;插件maven-source-plugin 无法下载因缺失版本号添加&lt;version&gt;3.1.0&lt;/version&gt;// 解决idea报错在&lt;build&gt;&lt;/build&gt;标签内添加&lt;defaultGoal&gt;compile&lt;/defaultGoal&gt;在&lt;plugins&gt;&lt;/plugins&gt;标签外套一个标签&lt;pluginManagement&gt;&lt;/pluginManagement&gt; 添加java文件123456789101112131415161718192021222324252627282930import com.facebook.ads.sdk.APIContext;import com.facebook.ads.sdk.AdAccount;import com.facebook.ads.sdk.Campaign;import com.facebook.ads.sdk.APIException;public class QuickStartExample &#123; public static final String ACCESS_TOKEN = &quot;[Your access token]&quot;;//Your access token public static final Long ACCOUNT_ID = 123456789L; //Your account ID public static final String APP_SECRET = &quot;[Your app secret]&quot;;//Your app secret public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET); public static void main(String[] args) &#123; try &#123; System.out.println(&quot;==========&quot;); AdAccount account = new AdAccount(ACCOUNT_ID, context); Campaign campaign = account.createCampaign() .setName(&quot;Java SDK Test Campaign&quot;) .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS) .setSpendCap(10000L) .setStatus(Campaign.EnumStatus.VALUE_PAUSED) .execute(); System.out.println(campaign.fetch()); &#125; catch (APIException e) &#123; e.printStackTrace(); &#125; &#125;&#125; or 123456789101112131415161718192021222324import com.facebook.ads.sdk.APIContext;import com.facebook.ads.sdk.APINodeList;import com.facebook.ads.sdk.AdAccount;import com.facebook.ads.sdk.Campaign;public class TestFBJavaSDK&#123; public static final APIContext context = new APIContext( &quot;your-access-token&quot;, &quot;your-appsecret&quot; ); public static void main(String[] args) &#123; AdAccount account = new AdAccount(&quot;act_&#123;your-adaccount-id&#125;&quot;, context); try &#123; APINodeList&lt;Campaign&gt; campaigns = account.getCampaigns().requestAllFields().execute(); for(Campaign campaign : campaigns) &#123; System.out.println(campaign.getFieldName()); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; 执行java文件既可发布请求到facebook服务器， 需要安全上网 1、主页推广根据提示一步一步提交，到 沙盒账号，如果之前没有添加则新建，要推广的主页，如果无则新建 到下载示例代码，点下载，将会获得一个java文件，里面含有accessToken、appid、ad_account_id、app_secret等信息，将该下载的SAMPLE_CODE.java文件放于与上面两个java文件同级目录，直接运行该java文件即可，注意此时电脑需要科学上网，不然会报错Timeout","categories":[],"tags":[{"name":"facebook","slug":"facebook","permalink":"hexo/tags/facebook/"}]},{"title":"facebook sdk 集成","slug":"facebook-sdk-集成","date":"2019-06-26T08:52:30.000Z","updated":"2019-07-05T09:33:56.299Z","comments":true,"path":"blog/2019/06/facebook-sdk-集成.html","link":"","permalink":"hexo/blog/2019/06/facebook-sdk-集成.html","excerpt":"","text":"Facebook sdk 集成首先需要在facebook注册一个账号，自通过账号进入facebook的开发者平台 创建应用，只需要填写应用名即可，回生成一个appid。 集成事件功能1、配置远端maven仓库地址 在项目android/build.gradle文件123456789101112131415buildscript&#123; repositories&#123; ... mavenCentral(); // 添加这行 &#125;&#125;allprojects&#123; repositories &#123; ... mavenCentral() // 添加这行 &#125;&#125; 2、添加依赖在app/build.gradle文件中添加依赖123456dependencies&#123; ... implementation &apos;com.facebook.android:facebook-android-sdk:[4,5)&apos; // 添加这行 // 最新sdk版本为 implementation &apos;com.facebook.android:facebook-android-sdk:[5,6)&apos; &#125; 3、添加facebook-app-id在res/values/string.xml中1234&lt;string name=&quot;facebook_app_id&quot;&gt;462119014332748&lt;/string&gt; &lt;string name=&quot;fb_login_protocol_scheme&quot;&gt;fb462119014332748&lt;/string&gt;// 462119014332748为你在facebook应用的appid// fb_login_protocol_scheme应该是用于登陆的 在/app/manifest/AndroidManifest.xml中12345678910111213141516&lt;application&gt; &lt;meta-data android:name=&quot;com.facebook.sdk.ApplicationId&quot; android:value=&quot;@string/facebook_app_id&quot;/&gt; &lt;activity android:name=&quot;com.facebook.FacebookActivity&quot; android:configChanges= &quot;keyboard|keyboardHidden|screenLayout|screenSize|orientation&quot; android:label=&quot;@string/app_name&quot; /&gt; &lt;activity android:name=&quot;com.facebook.CustomTabActivity&quot; android:exported=&quot;true&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt; &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt; &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot; /&gt; &lt;data android:scheme=&quot;@string/fb_login_protocol_scheme&quot; /&gt; &lt;/intent-filter&gt; &lt;/activity&gt;&lt;/application&gt; 4、在facebook开发者控制台配置analytics sdk在facebook开发者官网，点击「我的应用」即可进入应用控制台，可以创建应用，只需提供应用名，以及邮箱即可， 点击单个应用即可进入应用控制台进行编辑;上图是应用可添加的功能， 点击Analytics即将功能添加进应用，点设置，前几步都是提示，第四步，填入应用id，app/build.gradle中的applicationid，以及应用默认启动的Actiivty， 第五步，填入密钥散列，注意应该要填入两个，一个开发、一个发布，即debug自带的、一个release时通过jks文件签名生成的。获取方法12345// macos debug ，按下enter键需要输入开机密码keytool -exportcert -alias androiddebugkey -keystore ~/.android/debug.keystore | openssl sha1 -binary | openssl base64// release keytool -exportcert -alias YOUR_RELEASE_KEY_ALIAS -keystore YOUR_RELEASE_KEY_PATH | openssl sha1 -binary | openssl base64 5、发送事件 上面的1、2、3都只是基本配置，下面是手动发送事件 在MainApplication.java中FacebookSdk.sdkInitialize 四个初始化方法都已被遗弃， 看到说是不需要初始化了 在MainApplication.java中 12345678910@Override public void onCreate() &#123; super.onCreate(); // facebook 初始化 FacebookSdk.setIsDebugEnabled(true); AppEventsLogger.activateApp(MainApplication.this); FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS); &#125; 注意facebooksdk回自动收集一些事件,如果不需要自动收集功能需要在清单文件中配置 1234&lt;meta-data android:name=&quot;com.facebook.sdk.AutoLogAppEventsEnabled&quot; android:value=&quot;false&quot;/&gt; 在Actiivty中测试发送自定义事件 123456789101112@Overrideprotected void onResume() &#123; super.onResume(); logEvent();&#125;private void logEvent() &#123; Log.d(&quot;========&quot;, &quot;logEvent&quot;); AppEventsLogger logger = AppEventsLogger.newLogger(this); logger.logEvent(AppEventsConstants.EVENT_NAME_ACTIVATED_APP); logger.logEvent(&quot;Test Event&quot;);&#125; 在测试时发现，当打断点调试时发现，发送事件总是会失败，正常运行却可以在facebook分析工具中看得到提交的事件。 注意，运行时手机需要能连接到facebook后台服务器，大陆用户需要科学上网。","categories":[],"tags":[{"name":"facebook","slug":"facebook","permalink":"hexo/tags/facebook/"}]},{"title":"android okHttp3","slug":"android-okHttp3","date":"2019-06-18T02:52:40.000Z","updated":"2019-07-05T09:34:01.205Z","comments":true,"path":"blog/2019/06/android-okHttp3.html","link":"","permalink":"hexo/blog/2019/06/android-okHttp3.html","excerpt":"","text":"OkHttp3使用","categories":[],"tags":[{"name":"android","slug":"android","permalink":"hexo/tags/android/"}]},{"title":"vscode的常用插件与插件开发","slug":"vscode的常用插件与插件开发","date":"2019-04-28T07:06:57.000Z","updated":"2019-04-28T07:43:46.000Z","comments":true,"path":"blog/2019/04/vscode的常用插件与插件开发.html","link":"","permalink":"hexo/blog/2019/04/vscode的常用插件与插件开发.html","excerpt":"Visual Studio Code（VS code）是开发神器，通过插件配置不仅可以开发前端，还可以开发后端(java/go等)，下面介绍一下vscode的常用插件与插件如何开发一个自己的插件。","text":"Visual Studio Code（VS code）是开发神器，通过插件配置不仅可以开发前端，还可以开发后端(java/go等)，下面介绍一下vscode的常用插件与插件如何开发一个自己的插件。 nodejs123456curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash. ~/.bashrc#显示有远端的版本nvm ls-remote#安装对应的版本nvm install 对应的版本 安装常用工具： 1234567891011npm install hexo-cli -gnpm install hexo-server -gnpm install hexo-deployer-git -gnpm install yarn -gnpm install http-server -gyarn global add servenpm config set registry https://registry.npm.taobao.org --globalnpm config set disturl https://npm.taobao.org/dist --globalyarn config set registry https://registry.npm.taobao.org --globalyarn config set disturl https://npm.taobao.org/dist --global 常用插件安装以下插件：12345678910111213141516171819202122232425262728293031323334#javascripteslintColor PickernpmDebugger for ChromeEclipse Keymap#reactES7 React/Redux/GraphQL/React-Native snippets#vueVeturVue VSCode Snippets#gitGitLenszerofinance-git#其他公共插件Local HistoryXML ToolsPrettier#https://zhuanlan.zhihu.com/p/54031899koroFileHeaderAutoFileNameImport Cost#javaJava Extension PackSpring Boot Extension PackJava Code GeneratorsDocker#android/ios pluginAndroid iOS EmulatorReact Native Tools#see debug:https://github.com/Microsoft/vscode-react-native/blob/master/doc/debugging.md#debugging-on-ios-device#Install ios-deploy: npm install -g ios-deploy 代码注释koroFileHeader添加注释，在全局的settings.json中添加： 参考： https://code.visualstudio.com/docs/editor/emmet https://www.cnblogs.com/summit7ca/p/6944215.html 12345678910111213141516171819202122232425262728\"editor.fontSize\": 14,\"terminal.integrated.fontSize\": 14,\"emmet.triggerExpansionOnTab\": true,\"emmet.includeLanguages\": &#123; \"javascript\": \"javascriptreact\", \"vue-html\": \"html\", \"razor\": \"html\", \"plaintext\": \"jade\"&#125;,// 注释\"fileheader.configObj\": &#123; // 将该选项设置为true即可开启 \"autoAdd\": false&#125;,// 头部注释\"fileheader.customMade\": &#123; \"Author\": \"dave.zhao\", \"Date\": \"Do not edit\", \"LastEditors\": \"dave.zhao\", \"LastEditTime\": \"Do not edit\", \"Description\": \"\"&#125;,// 函数注释\"fileheader.cursorMode\": &#123; \"Date\": \"Do not edit\", \"description\": \"\", \"param\": \"\"&#125; 注意：Author和LastEditors填写自己的名字 文件头注释快捷键：window：ctrl+alt+i,mac：ctrl+cmd+i 函数注释快捷键：window：ctrl+alt+t,mac：ctrl+cmd+t 常用配置可以放在全局的settings.json中，也可以放在各个项目的settings.json中： 1234567891011121314151617181920&#123; \"eslint.validate\": [\"javascript\", \"javascriptreact\"], \"javascript.updateImportsOnFileMove.enabled\": \"always\", // 代码缩进修改成4个空格 \"editor.detectIndentation\": false, \"editor.tabSize\": 4, \"editor.formatOnSave\": true, // 每次保存的时候将代码按eslint格式进行修复 \"eslint.autoFixOnSave\": true, // 让prettier使用eslint的代码格式进行校验 \"prettier.eslintIntegration\": true, // 去掉代码结尾的分号 \"prettier.semi\": false, // 使用带引号替代双引号 \"prettier.singleQuote\": true, \"prettier.tabWidth\": 4, \"prettier.printWidth\": 250, // 让函数(名)和后面的括号之间加个空格 \"javascript.format.insertSpaceBeforeFunctionParenthesis\": true&#125; 插件开发参考代码https://github.com/zhaoxunyong/vs-code-git-plugin 参考 https://segmentfault.com/a/1190000008968904 https://www.cnblogs.com/virde/p/vscode-extension-input-and-output.html https://github.com/steveukx/git-js https://www.jianshu.com/p/2b096d8ad9b8 https://github.com/Microsoft/vscode-extension-samples https://www.jianshu.com/p/520c575e91c3 https://segmentfault.com/a/1190000017279102 https://segmentfault.com/a/1190000014758981 https://dev.azure.com/it0815/_usersSettings/tokensteh2foynynfdqzxhwe3xqchgkno42yz7h4ergheqhjushrnqtfnq https://www.cnblogs.com/liuxianan/p/vscode-plugin-publish.html https://www.cnblogs.com/virde/p/vscode-extension-input-and-output.html https://www.cnblogs.com/virde/p/vscode-extension-input-and-output.html http://nodejs.cn/api/fs.html#fs_fs_unlinksync_path","categories":[{"name":"vscode","slug":"vscode","permalink":"hexo/categories/vscode/"}],"tags":[{"name":"vscode","slug":"vscode","permalink":"hexo/tags/vscode/"}]}]}